// Copyright 2012 Jeeeyul Lee, Seoul, Korea
// https://github.com/jeeeyul/pde-tools
//
// This module is multi-licensed and may be used under the terms
// of any of the following licenses:
//
// EPL, Eclipse Public License, V1.0 or later, http://www.eclipse.org/legal
// LGPL, GNU Lesser General Public License, V2.1 or later, http://www.gnu.org/licenses/lgpl.html
// GPL, GNU General Public License, V2 or later, http://www.gnu.org/licenses/gpl.html
// AL, Apache License, V2.0 or later, http://www.apache.org/licenses
// BSD, BSD License, http://www.opensource.org/licenses/bsd-license.php
// MIT, MIT License, http://www.opensource.org/licenses/MIT
//
// Please contact the author if you need another license.
// This module is provided "as is", without warranties of any kind.
package org.essembeh.rtfm.ui;

import java.io.File;
import java.net.URL;

import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;
import org.osgi.framework.Bundle;

/**
 * Image constants for this project.
 * Generated by Jeeeyul's PDE-Tools.
 */
public class SharedImages{
	
	/**
	 * Image constant for icons/accept.png
	 */
	public static final String ACCEPT = "icons/accept.png";
	
	/**
	 * Image constant for icons/add.png
	 */
	public static final String ADD = "icons/add.png";
	
	/**
	 * Image constant for icons/cancel.png
	 */
	public static final String CANCEL = "icons/cancel.png";
	
	/**
	 * Image constant for icons/cog.png
	 */
	public static final String COG = "icons/cog.png";
	
	/**
	 * Image constant for icons/cross.png
	 */
	public static final String CROSS = "icons/cross.png";
	
	/**
	 * Image constant for icons/delete.png
	 */
	public static final String DELETE = "icons/delete.png";
	
	/**
	 * Image constant for icons/disk.png
	 */
	public static final String DISK = "icons/disk.png";
	
	/**
	 * Image constant for icons/find.png
	 */
	public static final String FIND = "icons/find.png";
	
	/**
	 * Image constant for icons/folder.png
	 */
	public static final String FOLDER = "icons/folder.png";
	
	/**
	 * Image constant for icons/house.png
	 */
	public static final String HOUSE = "icons/house.png";
	
	/**
	 * Image constant for icons/lightbulb.png
	 */
	public static final String LIGHTBULB = "icons/lightbulb.png";
	
	/**
	 * Image constant for icons/lightbulb_off.png
	 */
	public static final String LIGHTBULB_OFF = "icons/lightbulb_off.png";
	
	/**
	 * Image constant for icons/lock.png
	 */
	public static final String LOCK = "icons/lock.png";
	
	/**
	 * Image constant for icons/magnifier.png
	 */
	public static final String MAGNIFIER = "icons/magnifier.png";
	
	/**
	 * Image constant for icons/monitor.png
	 */
	public static final String MONITOR = "icons/monitor.png";
	
	/**
	 * Image constant for icons/music.png
	 */
	public static final String MUSIC = "icons/music.png";
	
	/**
	 * Image constant for icons/page.png
	 */
	public static final String PAGE = "icons/page.png";
	
	/**
	 * Image constant for icons/page_white.png
	 */
	public static final String PAGE_WHITE = "icons/page_white.png";
	
	/**
	 * Image constant for icons/page_white_text.png
	 */
	public static final String PAGE_WHITE_TEXT = "icons/page_white_text.png";
	
	/**
	 * Image constant for icons/picture.png
	 */
	public static final String PICTURE = "icons/picture.png";
	
	/**
	 * Image constant for icons/sample.gif
	 */
	public static final String SAMPLE = "icons/sample.gif";
	
	/**
	 * Image constant for icons/star.png
	 */
	public static final String STAR = "icons/star.png";
	
	/**
	 * Image constant for icons/stop.png
	 */
	public static final String STOP = "icons/stop.png";
	
	/**
	 * Image constant for icons/tick.png
	 */
	public static final String TICK = "icons/tick.png";
	
	/**
	 * Image constant for icons/wand.png
	 */
	public static final String WAND = "icons/wand.png";
	private static final ImageRegistry REGISTRY = new ImageRegistry(Display.getDefault());
	/**
	 * @param key
	 *            relative image path project.
	 * @return An {@link Image} Object for given path.
	 */
	public static Image getImage(String key){
		Image result = REGISTRY.get(key);
		if(result == null){
			result = loadImage(key);
			REGISTRY.put(key, result);
		}
		return result;
	}
	
	/**
	 * 
	 * @param key
	 *            relative image path project.
	 * @return An {@link ImageDescriptor} Object for given path.
	 */
	public static ImageDescriptor getImageDescriptor(String key){
		ImageDescriptor result = REGISTRY.getDescriptor(key);
		if(result == null){
			result = loadImageDescriptor(key);
			REGISTRY.put(key, result);
		}
		return result;
	}
	
	private static Image loadImage(String key) {
		try {
			Bundle bundle = Platform.getBundle("org.essembeh.rtfm.ui");
			URL resource = null;
			
			if(bundle != null){
				resource = Platform.getBundle("org.essembeh.rtfm.ui").getResource(key);
			}else{
				resource = new File(key).toURI().toURL();	
			}
			
			Image image = new Image(null, resource.openStream());
			return image;
		} catch (Exception e) {
			e.printStackTrace();
			return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
		}
	}
	
	private static ImageDescriptor loadImageDescriptor(String key) {
		try {
			Bundle bundle = Platform.getBundle("org.essembeh.rtfm.ui");
			URL resource = null;
			
			if(bundle != null){
				resource = Platform.getBundle("org.essembeh.rtfm.ui").getResource(key);
			}else{
				resource = new File(key).toURI().toURL();	
			}
			
			ImageDescriptor descriptor = ImageDescriptor.createFromURL(resource);
			return descriptor;
		} catch (Exception e) {
			e.printStackTrace();
			return PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_ERROR_TSK);
		}
	}
}
